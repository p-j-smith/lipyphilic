[build-system]
requires = ["maturin>=1.1,<2.0"]
build-backend = "maturin"

[project]
name = "lipyphilic"
authors = [
    {email = "paul.j.smith@ucl.ac.uk", name = "Paul Smith"},
]
keywords = [
    "lipid",
    "molecular dynamics",
]
description = "Analyse MD simulations of lipids with python'"
readme = "README.rst"
requires-python = ">=3.10"
classifiers = [
    # complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
    'Development Status :: 4 - Beta',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',
    'Operating System :: Unix',
    'Operating System :: POSIX',
    'Operating System :: Microsoft :: Windows',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    "Programming Language :: Rust",
    'Topic :: Scientific/Engineering'
]
dependencies = [
    "attrs",
    "numpy",
    "scipy",
    "pandas",
    "matplotlib",
    "mdanalysis",
    "freud-analysis",
    "tidynamics",
    "seaborn",
    "tqdm",
]
urls.bugtracker = "https://github.com/p-j-smith/lipyphilic/issues"
urls.documentation = "https://lipyphilic.readthedocs.io/en/stable"
urls.homepage = "https://github.com/p-j-smith/lipyphilic"
urls.usersupport = "https://github.com/p-j-smith/lipyphilic/discussions"

[project.optional-dependencies]
tests = [
    "pytest",
    "pytest-cov",
    "coverage",
    "tox",
]
docs = [
    "sphinx",
    "sphinx_rtd_theme",
]
dev =[
    "lipyphilic[tests,docs]",
    "pre-commit",
]

[tool.maturin]
bindings = "pyo3"
profile = "release"
features = ["pyo3/extension-module"]
manifest-path = "rust/Cargo.toml"
module-name = "lipyphilic._lipyferric"
python-source = "src"
python-packages = ["lipyphilic"]
strip = true

[tool.pytest.ini_options]
addopts = "--color=yes -vv --strict-markers"
testpaths = [
    "tests",
]

[tool.coverage.paths]
source = [
    "src",
    ".tox/*/site-packages",
]

[tool.coverage.run]
branch = true
parallel = true
source = ["lipyphilic"]

[tool.coverage.report]
skip_covered = false
show_missing = true
sort = "cover"
precision = 2
omit = [
    ".gitignore",
    "*tests*",
    "*/base.py",
    "src/lipyphilic/__init__.py",
    "src/lipyphilic/lib/__init__.py",
    "rust/"
]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise NotImplementedError",
    "except ImportError:",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.ruff]
target-version = "py310"
fix = true
show-fixes = true
force-exclude = true
line-length = 110
select = [
    "E", "F", "W", # flake8
    "A",           # flake8-builtins
    "B", "B904",   # flake8-bugbear
    "ARG",         # flake8-unused-arguments
    "C4",          # flake8-comprehensions
    "COM",         # flake8-commas
    "DTZ",         # flake8-datetime
    "EM",          # flake8-errmsg
    "F",           # pyflakes
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "G",           # flake8-logging-format
    "N",           # pep8-naming
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RUF",         # Ruff-specific
    "S",           # flake8-bandit
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "TID",         # flake8-tidy-imports
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
    "EXE",         # flake8-executable
    "NPY",         # NumPy specific rules
    "PD",          # pandas-vet
]
ignore = [
    "E501",        # line too long
    "N802",        # function name lowercase
    "N803",        # argument name should be lowercase
    "N806",        # variable in function should be lowercase
    "PD002",       # 'inplace=True' should be avoided
    "PD011",       # use '.to_numpy() instead of '.values'
    "PLR0913",     # Too many arguments to function call
    "PLR2004",     # magic value used in comparison
    "PT012",       # pytest.raises() multiline statement
    "RET504",      # unnecessary variable assignment before 'return'
]
flake8-unused-arguments.ignore-variadic-names = true
pep8-naming.classmethod-decorators = [
    "classmethod",
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401",        # unused imports
]
"src/lipyphilic/__init__.py" = [
    "E402",        # module level import not at top of file
]
"src/lipyphilic/transformations.py" = [
    "N801",        # class name should use CapWords convention
    "PD002",       # 'inplace=True' should be avoided
]
"tests/**" = [
    "PLR2004",     # magic value used in comparison
    "S101",        # use of assert
]
"docs/**" = [
    "I",          # isort
]
"docs/conf.py" = [
    "E402",        # module level import not at top of file
    "A001",        # Variable 'copyright' shadows a Python builtin
]

[tool.black]
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | \.pytest_cache
    | \.ruff_cache
    | \.gitignore
    | _build
    | build
    | dist
    | examples
  )/
)
'''
line-length = 110
target-version = ["py310", "py311"]

[tool.ruff.isort]
force-single-line = false
combine-as-imports = true
force-sort-within-sections = true
order-by-type = true
known-first-party = ["lipyphilic"]
